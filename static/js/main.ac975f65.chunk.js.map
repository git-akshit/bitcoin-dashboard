{"version":3,"sources":["LineChart.js","ToolTip.js","InfoBox.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","props","state","hoverLoc","activePoint","data","this","min","x","max","length","reduce","p","y","svgWidth","yLabelSize","getX","svgHeight","xLabelSize","gY","getY","color","pathD","getSvgX","getSvgY","map","point","i","join","className","d","style","stroke","x1","y1","x2","y2","strokeDasharray","transform","textAnchor","toLocaleString","currency","e","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","width","relativeLoc","clientX","left","svgData","push","svgX","svgY","closestPoint","c","Math","abs","stopHover","setState","onChartHover","pointRadius","r","cx","cy","height","viewBox","onMouseLeave","onMouseMove","getCoords","makeAxis","makePath","makeArea","makeLabels","createLine","makeActivePoint","Component","defaultProps","ToolTip","placementStyles","InfoBox","currentPrice","monthChangeD","monthChangeP","updatedAt","getData","fetch","then","json","bitcoinData","price","bpi","USD","rate_float","change","changeP","toFixed","time","updated","catch","console","log","refresh","setInterval","clearInterval","id","moment","fromNow","App","fetchingData","sortedData","count","date","format","subscribe","ws","WebSocket","onopen","send","JSON","stringify","onmessage","value","parse","event","a","b","handleChartHover","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ac975f65.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./LineChart.css\";\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoverLoc: null,\n      activePoint: null\n    }\n  }\n  // GET X & Y || MAX & MIN\n  getX(){\n    const {data} = this.props;\n    return {\n      min: data[0].x,\n      max: data[data.length - 1].x\n    }\n  }\n  getY(){\n    const {data} = this.props;\n    return {\n      min: data.reduce((min, p) => p.y < min ? p.y : min, data[0].y),\n      max: data.reduce((max, p) => p.y > max ? p.y : max, data[0].y)\n    }\n  }\n  // GET SVG COORDINATES\n  getSvgX(x) {\n    const {svgWidth, yLabelSize} = this.props;\n    return yLabelSize + (x / this.getX().max * (svgWidth - yLabelSize));\n  }\n  getSvgY(y) {\n    const {svgHeight, xLabelSize} = this.props;\n    const gY = this.getY();\n    return ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) / (gY.max - gY.min);\n  }\n  // BUILD SVG PATH\n  makePath() {\n    const {data, color} = this.props;\n    let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\n\n    pathD += data.map((point, i) => {\n      return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\n    }).join(\"\");\n\n    return (\n      <path className=\"linechart_path\" d={pathD} style={{stroke: color}} />\n    );\n  }\n  // BUILD SHADED AREA\n  makeArea() {\n    const {data} = this.props;\n    let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\n\n    pathD += data.map((point, i) => {\n      return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\n    }).join(\"\");\n\n    const x = this.getX();\n    const y = this.getY();\n    pathD += \"L \" + this.getSvgX(x.max) + \" \" + this.getSvgY(y.min) + \" \"\n    + \"L \" + this.getSvgX(x.min) + \" \" + this.getSvgY(y.min) + \" \";\n\n    return <path className=\"linechart_area\" d={pathD} />\n  }\n  // BUILD GRID AXIS\n  makeAxis() {\n    const {yLabelSize} = this.props;\n    const x = this.getX();\n    const y = this.getY();\n\n    return (\n      <g className=\"linechart_axis\">\n        <line\n          x1={this.getSvgX(x.min) - yLabelSize} y1={this.getSvgY(y.min)}\n          x2={this.getSvgX(x.max)} y2={this.getSvgY(y.min)}\n          strokeDasharray=\"5\" />\n        <line\n          x1={this.getSvgX(x.min) - yLabelSize} y1={this.getSvgY(y.max)}\n          x2={this.getSvgX(x.max)} y2={this.getSvgY(y.max)}\n          strokeDasharray=\"5\" />\n      </g>\n    );\n  }\n  makeLabels(){\n    const {svgHeight, svgWidth, xLabelSize, yLabelSize} = this.props;\n    const padding = 5;\n    return(\n      <g className=\"linechart_label\">\n        {/* Y AXIS LABELS */}\n        <text transform={`translate(${yLabelSize/2}, 20)`} textAnchor=\"middle\">\n          {this.getY().max.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\n        </text>\n        <text transform={`translate(${yLabelSize/2}, ${svgHeight - xLabelSize - padding})`} textAnchor=\"middle\">\n          {this.getY().min.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\n        </text>\n        {/* X AXIS LABELS */}\n        <text transform={`translate(${yLabelSize}, ${svgHeight})`} textAnchor=\"start\">\n          { this.props.data[0].d }\n        </text>\n        <text transform={`translate(${svgWidth}, ${svgHeight})`} textAnchor=\"end\">\n          { this.props.data[this.props.data.length - 1].d }\n        </text>\n      </g>\n    )\n  }\n  // FIND CLOSEST POINT TO MOUSE\n  getCoords(e){\n    const {svgWidth, data, yLabelSize} = this.props;\n    const svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\n    const adjustment = (svgLocation.width - svgWidth) / 2; //takes padding into consideration\n    const relativeLoc = e.clientX - svgLocation.left - adjustment;\n\n    let svgData = [];\n    data.map((point, i) => {\n      svgData.push({\n        svgX: this.getSvgX(point.x),\n        svgY: this.getSvgY(point.y),\n        d: point.d,\n        p: point.p\n      });\n    });\n\n    let closestPoint = {};\n    for(let i = 0, c = 500; i < svgData.length; i++){\n      if ( Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c ){\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\n        closestPoint = svgData[i];\n      }\n    }\n\n    if(relativeLoc - yLabelSize < 0){\n      this.stopHover();\n    } else {\n      this.setState({\n        hoverLoc: relativeLoc,\n        activePoint: closestPoint\n      })\n      this.props.onChartHover(relativeLoc, closestPoint);\n    }\n  }\n  // STOP HOVER\n  stopHover(){\n    this.setState({hoverLoc: null, activePoint: null});\n    this.props.onChartHover(null, null);\n  }\n  // MAKE ACTIVE POINT\n  makeActivePoint(){\n    const {color, pointRadius} = this.props;\n    return (\n      <circle\n        className='linechart_point'\n        style={{stroke: color}}\n        r={pointRadius}\n        cx={this.state.activePoint.svgX}\n        cy={this.state.activePoint.svgY}\n      />\n    );\n  }\n  // MAKE HOVER LINE\n  createLine(){\n    const {svgHeight, xLabelSize} = this.props;\n    return (\n      <line className='hoverLine'\n        x1={this.state.hoverLoc} y1={-8}\n        x2={this.state.hoverLoc} y2={svgHeight - xLabelSize} />\n    )\n  }\n\n  render() {\n    const {svgHeight, svgWidth} = this.props;\n\n    return (\n      <svg  width={svgWidth} height={svgHeight} viewBox={`0 0 ${svgWidth} ${svgHeight}`} className={'linechart'}\n            onMouseLeave={ () => this.stopHover() }\n            onMouseMove={ (e) => this.getCoords(e) } >\n        <g>\n          {this.makeAxis()}\n          {this.makePath()}\n          {this.makeArea()}\n          {this.makeLabels()}\n          {this.state.hoverLoc ? this.createLine() : null}\n          {this.state.hoverLoc ? this.makeActivePoint() : null}\n        </g>\n      </svg>\n    );\n  }\n}\n// DEFAULT PROPS\nLineChart.defaultProps = {\n  data: [],\n  color: '#2196F3',\n  pointRadius: 5,\n  svgHeight: 500,\n  svgWidth: 1100,\n  xLabelSize: 20,\n  yLabelSize: 80\n}\n\nexport default LineChart;\n","import React, { Component } from 'react';\nimport './ToolTip.css';\n\nclass ToolTip extends Component {\n\n  render() {\n    const {hoverLoc, activePoint} = this.props;\n    const svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\n\n    let placementStyles = {};\n    let width = 100;\n    placementStyles.width = width + 'px';\n    placementStyles.left = hoverLoc + svgLocation.left - (width/2);\n\n    return (\n      <div className='hover' style={ placementStyles }>\n        <div className='date'>{ activePoint.d }</div>\n        <div className='price'>{activePoint.p }</div>\n      </div>\n    )\n  }\n}\n\nexport default ToolTip;\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport './InfoBox.css';\n\nclass InfoBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPrice: null,\n      monthChangeD: null,\n      monthChangeP: null,\n      updatedAt: null\n    }\n  }\n  componentDidMount(){\n    this.getData = () => {\n      const {data} = this.props;\n      const url = 'https://api.coindesk.com/v1/bpi/currentprice.json';\n\n      fetch(url).then(r => r.json())\n        .then((bitcoinData) => {\n          const price = bitcoinData.bpi.USD.rate_float;\n          const change = price - data[0].y;\n          const changeP = (price - data[0].y) / data[0].y * 100;\n\n          this.setState({\n            currentPrice: bitcoinData.bpi.USD.rate_float,\n            monthChangeD: change.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' }),\n            monthChangeP: changeP.toFixed(2) + '%',\n            updatedAt: bitcoinData.time.updated\n          })\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n    this.getData();\n    this.refresh = setInterval(() => this.getData(), 90000);\n\n    \n  }\n  componentWillUnmount(){\n    clearInterval(this.refresh);\n  }\n  render(){\n    return (\n      <div id=\"data-container\">\n        { this.state.currentPrice ?\n          <div id=\"left\" className='box'>\n            <div className=\"heading\">{this.state.currentPrice.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}</div>\n            <div className=\"subtext\">{'Updated ' + moment(this.state.updatedAt ).fromNow()}</div>\n          </div>\n        : null}\n        { this.state.currentPrice ?\n          <div id=\"middle\" className='box'>\n            <div className=\"heading\">{this.state.monthChangeD}</div>\n            <div className=\"subtext\">Change Since Last Month (USD)</div>\n          </div>\n        : null}\n          <div id=\"right\" className='box'>\n            <div className=\"heading\">{this.state.monthChangeP}</div>\n            <div className=\"subtext\">Change Since Last Month (%)</div>\n          </div>\n\n      </div>\n    );\n  }\n}\n\nexport default InfoBox;\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport './App.css';\nimport LineChart from './LineChart';\nimport ToolTip from './ToolTip';\nimport InfoBox from './InfoBox';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetchingData: true,\n      data: null,\n      hoverLoc: null,\n      activePoint: null\n    }\n  }\n  handleChartHover(hoverLoc, activePoint){\n    this.setState({\n      hoverLoc: hoverLoc,\n      activePoint: activePoint\n    })\n  }\n  componentDidMount(){\n    const getData = () => {\n      const url = 'https://api.coindesk.com/v1/bpi/historical/close.json';\n\n      fetch(url).then( r => r.json())\n        .then((bitcoinData) => {\n          const sortedData = [];\n          let count = 0;\n          for (let date in bitcoinData.bpi){\n            sortedData.push({\n              d: moment(date).format('MMM DD'),\n              p: bitcoinData.bpi[date].toLocaleString('us-EN',{ style: 'currency', currency: 'USD' }),\n              x: count, //previous days\n              y: bitcoinData.bpi[date] // numerical price\n            });\n            count++;\n          }\n          this.setState({\n            data: sortedData,\n            fetchingData: false\n          })\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n    getData();\n\n    const subscribe = {\n      \"event\": \"message\",\n    \"data\": {\n        \"operation\": \"subscribe\",\n        \"options\": {\n            \"currency\": \"BTCUSD\",\n            \"symbol_set\": \"global\"\n        }\n    }\n    };\n\n    this.ws = new WebSocket(\"wss://apiv2.bitcoinaverage.com/websocket/ticker\");\n\n    this.ws.onopen = () => {\n      this.ws.send(JSON.stringify(subscribe));\n    };\n\n    this.ws.onmessage = e => {\n      const value = JSON.parse(e.data);\n      console.log(value);\n      if (value.event === \"message\") {\n        console.log(value);\n        return;\n      }\n      console.log(value);\n    }\n  }\n  render() {\n    return (\n\n      <div className='container'>\n        <div className='row'>\n          <h1>30 Day Bitcoin Price Chart</h1>\n        </div>\n        <div className='row'>\n          { !this.state.fetchingData ?\n          <InfoBox data={this.state.data} />\n          : null }\n        </div>\n        <div className='row'>\n          <div className='popup'>\n            {this.state.hoverLoc ? <ToolTip hoverLoc={this.state.hoverLoc} activePoint={this.state.activePoint}/> : null}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='chart'>\n            { !this.state.fetchingData ?\n              <LineChart data={this.state.data} onChartHover={ (a,b) => this.handleChartHover(a,b) }/>\n              : null }\n          </div>\n        </div>\n        <div className='row'>\n          <div id=\"coindesk\"> Powered by <a href=\"http://www.coindesk.com/price/\">CoinDesk</a></div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}